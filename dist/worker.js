!function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t){e.exports={Router:({base:e="",routes:t=[]}={})=>({__proto__:new Proxy({},{get:(r,n,s)=>(r,...o)=>t.push([n.toUpperCase(),RegExp(`^${(e+r).replace(/(\/?)\*/g,"($1.*)?").replace(/\/$/,"").replace(/:(\w+)(\?)?(\.)?/g,"$2(?<$1>[^/]+)$2$3").replace(/\.(?=[\w(])/,"\\.").replace(/\)\.\?\(([^\[]+)\[\^/g,"?)\\.?($1(?<=\\.)[^\\.")}/*$`),o])&&s}),routes:t,async handle(e,...r){let n,s,o=new URL(e.url);for(var[i,a,p]of(e.query=Object.fromEntries(o.searchParams),t))if((i===e.method||"ALL"===i)&&(s=o.pathname.match(a)))for(var l of(e.params=s.groups,p))if(void 0!==(n=await l(e.proxy||e,...r)))return n}})}},function(e,t,r){"use strict";r.r(t);var n=r(0);const s=(e,t)=>new Response(`<rss version="2.0"><channel><title>fakeRSS</title><description>fakeRSS</description><language>en</language><item><title>json</title><link>https://fakeRSS.labs/json</link><description>${JSON.stringify(e)}</description><pubDate>Sun, 23 Jan 2022 17:50:24 -0000</pubDate></item></channel></rss>`,{headers:{"Content-Type":"application/xml"},...t}),o=e=>`<p>${e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/<b>/g,"<strong>").replace(/<\/b>/g,"</strong>").replace(/\n/g,"<br>")}</p>`,i=e=>s({response:o(e),sendResponse:!0,responseType:"text",status:"ok"});var a={help:(e,t)=>{const r="List of all commands:<br><br>"+Object.keys(p).map(e=>`<b>!${e}</b> - ${p[e]}`).join("<br>");return i(r)},ping:(e,t)=>i("🏓 Pong!"),reddit:(e,t)=>i("Reddit command not implemented yet!"),debug:(e,t,r)=>i(`<b>Debug Data</b><br><ul><li><b>${Object.keys(r.commands).length}</b> commands loaded</li><li>bot prefix: <b>${r.prefix}</b></li></ul><br><b>Plain-text message:</b><br>${e}`)};const p={help:"shows this help menu",ping:"🏓 pong!",reddit:"view posts from reddit",debug:"shows debug statistics"},l=(e,t)=>{const r=e.m;if(""===r||void 0===r)return n=new Error("CommandMissing"),s({response:o("An internal error occured while running your command:<br><br>Error Details: "+n.message),sendResponse:!0,responseType:"text",status:"error"});var n;const i=r.trim().split("\n")[0].split(" ")[0];if(!i.startsWith(t.prefix))return s({response:"",sendResponse:!1,status:"ignore"});const p=i.substring(t.prefix.length);return a[p]?a[p](r,r.split(" ").slice(1),{...t,commands:a}):s({response:o(`The command <b>${p}</b> doesn't exist!<br><br>Run <b>!help</b> for a list of commands.`),sendResponse:!0,responseType:"text",status:"error"})},u=Object(n.Router)(),c={prefix:"!"};u.get("/rssbot/",({query:e})=>l(e,c)),u.all("*",()=>new Response("hello world!",{status:404})),addEventListener("fetch",e=>e.respondWith(u.handle(e.request)))}]);