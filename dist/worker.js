!function(e){var r={};function t(n){if(r[n])return r[n].exports;var s=r[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,t),s.l=!0,s.exports}t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var s in e)t.d(n,s,function(r){return e[r]}.bind(null,s));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=1)}([function(e,r){e.exports={Router:({base:e="",routes:r=[]}={})=>({__proto__:new Proxy({},{get:(t,n,s)=>(t,...o)=>r.push([n.toUpperCase(),RegExp(`^${(e+t).replace(/(\/?)\*/g,"($1.*)?").replace(/\/$/,"").replace(/:(\w+)(\?)?(\.)?/g,"$2(?<$1>[^/]+)$2$3").replace(/\.(?=[\w(])/,"\\.").replace(/\)\.\?\(([^\[]+)\[\^/g,"?)\\.?($1(?<=\\.)[^\\.")}/*$`),o])&&s}),routes:r,async handle(e,...t){let n,s,o=new URL(e.url);for(var[a,i,p]of(e.query=Object.fromEntries(o.searchParams),r))if((a===e.method||"ALL"===a)&&(s=o.pathname.match(i)))for(var l of(e.params=s.groups,p))if(void 0!==(n=await l(e.proxy||e,...t)))return n}})}},function(e,r,t){"use strict";t.r(r);var n=t(0);const s=(e,r)=>new Response(`<rss version="2.0"><channel><title>fakeRSS</title><description>fakeRSS</description><language>en</language><item><title>json</title><link>https://fakeRSS.labs/json</link><description>${JSON.stringify(e)}</description><pubDate>Sun, 23 Jan 2022 17:50:24 -0000</pubDate></item></channel></rss>`,{headers:{"Content-Type":"application/xml"},...r}),o=e=>`<p>${e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/<b>/g,"<strong>").replace(/<\/b>/g,"</strong>").replace(/\n/g,"<br>")}</p>`,a=e=>s({response:o(e),sendResponse:!0,responseType:"text",status:"ok"});var i={help:(e,r)=>{const t="List of all commands:<br><br>"+Object.keys(p).map(e=>`<b>!${e}</b> - ${p[e]}`).join("<br>");return a(t)},ping:(e,r)=>a("🏓 Pong!"),reddit:(e,r)=>a("Reddit command not implemented yet!"),debug:(e,r,t)=>a(`<b>Debug Data</b><br><br><b>${t.commands}</b> commands loaded<br>prefix: <b>${t.prefix}</b><br><br><b>plaintext message data:</b><br>${e}`)};const p={help:"shows this help menu",ping:"🏓 pong!",reddit:"view posts from reddit",debug:"shows debug statistics"},l=(e,r)=>{const t=e.m;if(""===t||void 0===t)return n=new Error("CommandMissing"),s({response:o("An internal error occured while running your command:<br><br>Error Details: "+n.message),sendResponse:!0,responseType:"text",status:"error"});var n;const a=t.trim().split(" ")[0];if(!a.startsWith(r.prefix))return s({response:"",sendResponse:!1,status:"ignore"});const p=a.substring(r.prefix.length);return i[p]?i[p](t,t.split(" ").slice(1),{...r,commands:i}):s({response:o(`The command <b>${p}</b> doesn't exist!<br><br>Run <b>!help</b> for a list of commands.`),sendResponse:!0,responseType:"text",status:"error"})},u=Object(n.Router)(),c={prefix:"!"};u.get("/rssbot/",({query:e})=>l(e,c)),u.all("*",()=>new Response("hello world!",{status:404})),addEventListener("fetch",e=>e.respondWith(u.handle(e.request)))}]);